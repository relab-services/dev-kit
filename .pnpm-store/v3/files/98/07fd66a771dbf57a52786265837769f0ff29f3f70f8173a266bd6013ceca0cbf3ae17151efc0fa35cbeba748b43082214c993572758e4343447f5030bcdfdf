import '@scalar/components/style.css';
import { type ThemeId } from '@scalar/themes';
import '@scalar/themes/style.css';
import type { ReferenceLayoutProps, ReferenceSlotProps } from '../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<Omit<ReferenceLayoutProps, "isDark">>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    changeTheme: (args_0: {
        id: ThemeId;
        label: string;
    }) => void;
    updateContent: (value: string) => void;
    loadSwaggerFile: () => void;
    linkSwaggerFile: () => void;
    toggleDarkMode: () => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Omit<ReferenceLayoutProps, "isDark">>>> & {
    onToggleDarkMode?: (() => any) | undefined;
    onChangeTheme?: ((args_0: {
        id: ThemeId;
        label: string;
    }) => any) | undefined;
    onLoadSwaggerFile?: (() => any) | undefined;
    onLinkSwaggerFile?: (() => any) | undefined;
    onUpdateContent?: ((value: string) => any) | undefined;
}, {}, {}>, Readonly<{
    footer: (props: ReferenceSlotProps) => any;
    header: (props: ReferenceSlotProps) => any;
    editor: (props: ReferenceSlotProps) => any;
    "content-start": (props: ReferenceSlotProps) => any;
    "content-end": (props: ReferenceSlotProps) => any;
    "sidebar-start": (props: ReferenceSlotProps) => any;
    "sidebar-end": (props: ReferenceSlotProps) => any;
}> & {
    footer: (props: ReferenceSlotProps) => any;
    header: (props: ReferenceSlotProps) => any;
    editor: (props: ReferenceSlotProps) => any;
    "content-start": (props: ReferenceSlotProps) => any;
    "content-end": (props: ReferenceSlotProps) => any;
    "sidebar-start": (props: ReferenceSlotProps) => any;
    "sidebar-end": (props: ReferenceSlotProps) => any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=ApiReferenceLayout.vue.d.ts.map