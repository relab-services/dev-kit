import { type TargetId } from 'httpsnippet-lite';
import type { AvailableTarget } from 'httpsnippet-lite/dist/types/helpers/utils';
import { type Ref } from 'vue';
import type { HiddenClients } from '../types';
declare function getTargetTitle(client: HttpClientState): string;
declare function getClientTitle(client: HttpClientState): string;
export declare function filterHiddenClients(targets: AvailableTarget[], exclude: Ref<HiddenClients>): AvailableTarget[];
export type HttpClientState = {
    targetKey: TargetId;
    clientKey: string;
};
declare function resetState(): void;
export declare const useHttpClientStore: () => {
    httpClient: {
        readonly targetKey: TargetId;
        readonly clientKey: string;
    };
    resetState: typeof resetState;
    setHttpClient: (newState: Partial<HttpClientState>) => void;
    excludedClients: Ref<HiddenClients>;
    setExcludedClients: (v: HiddenClients) => void;
    availableTargets: import("vue").ComputedRef<AvailableTarget[]>;
    getClientTitle: typeof getClientTitle;
    getTargetTitle: typeof getTargetTitle;
    httpTargetTitle: import("vue").ComputedRef<string>;
    httpClientTitle: import("vue").ComputedRef<string>;
};
export {};
//# sourceMappingURL=useHttpClientStore.d.ts.map