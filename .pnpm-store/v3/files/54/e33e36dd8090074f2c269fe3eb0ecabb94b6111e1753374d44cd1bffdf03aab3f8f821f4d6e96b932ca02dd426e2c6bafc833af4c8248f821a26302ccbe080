import { type AuthenticationState } from '@scalar/oas-utils';
export declare const createEmptyAuthenticationState: () => AuthenticationState;
export declare const useAuthenticationStore: () => {
    authentication: {
        customSecurity: boolean;
        preferredSecurityScheme: string | null;
        securitySchemes?: {
            [key: string]: import("@scalar/openapi-parser").OpenAPIV3.ReferenceObject | import("@scalar/openapi-parser").OpenAPIV3.SecuritySchemeObject;
        } | Record<string, import("@scalar/openapi-parser").OpenAPIV3_1.ReferenceObject | import("@scalar/openapi-parser").OpenAPIV3.SecuritySchemeObject> | undefined;
        http: {
            basic: {
                username: string;
                password: string;
            };
            bearer: {
                token: string;
            };
        };
        apiKey: {
            token: string;
        };
        oAuth2: {
            clientId: string;
            scopes: string[];
            accessToken: string;
            state: string;
            username: string;
            password: string;
        };
    };
    setAuthentication: (newState: Partial<AuthenticationState>) => {
        customSecurity: boolean;
        preferredSecurityScheme: string | null;
        securitySchemes?: {
            [key: string]: import("@scalar/openapi-parser").OpenAPIV3.ReferenceObject | import("@scalar/openapi-parser").OpenAPIV3.SecuritySchemeObject;
        } | Record<string, import("@scalar/openapi-parser").OpenAPIV3_1.ReferenceObject | import("@scalar/openapi-parser").OpenAPIV3.SecuritySchemeObject> | undefined;
        http: {
            basic: {
                username: string;
                password: string;
            };
            bearer: {
                token: string;
            };
        };
        apiKey: {
            token: string;
        };
        oAuth2: {
            clientId: string;
            scopes: string[];
            accessToken: string;
            state: string;
            username: string;
            password: string;
        };
    } & Partial<AuthenticationState>;
};
//# sourceMappingURL=useAuthenticationStore.d.ts.map