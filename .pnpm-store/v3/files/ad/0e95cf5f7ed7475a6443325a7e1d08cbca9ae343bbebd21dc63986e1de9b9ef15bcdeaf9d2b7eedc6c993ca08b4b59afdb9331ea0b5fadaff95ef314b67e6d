import type { ClientRequestConfig } from '../types';
/**
 * Before a request is sent to the server, we’ll do some final preparation.
 *
 * - Add Content-Type header if request.body is JSON
 * - Parse request.body if it’s JSON
 * - Remove duplicate headers
 */
export declare const prepareClientRequestConfig: (configuration: {
    request: ClientRequestConfig;
}) => {
    id?: string | undefined;
    name?: string | undefined;
    /**
     * Before a request is sent to the server, we’ll do some final preparation.
     *
     * - Add Content-Type header if request.body is JSON
     * - Parse request.body if it’s JSON
     * - Remove duplicate headers
     */
    url: string;
    type: string;
    path: string;
    variables?: import("@scalar/oas-utils").BaseParameter[] | undefined;
    query?: import("@scalar/oas-utils").BaseParameter[] | undefined;
    cookies?: import("@scalar/oas-utils").BaseParameter[] | undefined;
    headers?: import("@scalar/oas-utils").BaseParameter[] | undefined;
    body?: string | undefined;
    formData?: import("@scalar/oas-utils").BaseParameter[] | undefined;
};
//# sourceMappingURL=prepareClientRequestConfig.d.ts.map