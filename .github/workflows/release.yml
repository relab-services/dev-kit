on:
  push:
    branches:
      - master
env:
  CI: true
  PNPM_CACHE_FOLDER: .pnpm-store
  NX_CACHE_FOLDER: .nx
jobs:
  release:
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    name: Release
    runs-on: ubuntu-latest
    environment: npm
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.PNPM_CACHE_FOLDER }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/cache@v4
        name: Setup nx cache
        with:
          path: ${{ env.NX_CACHE_FOLDER }}
          key: ${{ runner.os }}-nx-store-
          restore-keys: |
            ${{ runner.os }}-nx-store-

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        run: npm i pnpm@latest -g

      - name: Setup .npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Setup pnpm config
        run: pnpm config set store-dir $PNPM_CACHE_FOLDER

      - run: pnpm install

      - run: pnpm lint

      - run: pnpm build

      - name: Changesets Publish
        uses: changesets/action@v1
        id: changesets
        with:
          version: pnpm changeset version
          commit: "Version update"
          title: "Version update"
          publish: pnpm changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Published
        if: steps.changesets.outputs.published == 'true'
        shell: bash
        run: |
          echo "Version published"

      - name: Has changesets
        if: steps.changesets.outputs.hasChangesets == 'true'
        shell: bash
        run: |
          echo "Version published"
